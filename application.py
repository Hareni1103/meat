# -*- coding: utf-8 -*-
"""application.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BfjbtIhHv-dOO9bUyAjfdSeHbx7BUVi2
"""

import pandas as pd
import streamlit as st
from io import BytesIO

# Streamlit Title and Instructions
st.title("Meat Description Classifier")
st.write("Upload your Meat Input File and Rules File to classify product descriptions based on matching keywords.")

# Upload Files
input_file = st.file_uploader("Upload Meat Input File (.xlsx)", type=["xlsx"])
rules_file = st.file_uploader("Upload Rules File (.xlsx)", type=["xlsx"])

# Proceed when both files are uploaded
if input_file and rules_file:
    # Load Excel Files
    input_df = pd.read_excel(input_file)
    rules_df = pd.read_excel(rules_file)

    # Convert relevant columns to uppercase strings for case-insensitive comparison
    input_df['Best Received External Description'] = input_df['Best Received External Description'].astype(str).str.upper()
    rules_df['Consolidated nan descript'] = rules_df['Consolidated nan descript'].astype(str).str.upper()
    rules_df['Exclude Retailer description'] = rules_df['Exclude Retailer description'].astype(str).str.upper()

    # Extract exclude keywords and mapping descriptions
    exclude_keywords = rules_df['Exclude Retailer description'].dropna().unique().tolist()
    mapping_keywords = rules_df['Consolidated nan descript'].dropna().unique().tolist()

    # Initialize prediction column
    input_df['Predicted Description'] = ''

    # Process each row in the input file
    for idx, row in input_df.iterrows():
        description = row['Best Received External Description']

        # Exclude check
        if any(exclude_kw in description for exclude_kw in exclude_keywords):
            input_df.at[idx, 'Predicted Description'] = 'Exclude'
            continue

        # Match with rules
        matched = False
        for rule in mapping_keywords:
            rule_words = rule.split()
            if any(word in description for word in rule_words):
                input_df.at[idx, 'Predicted Description'] = rule
                matched = True
                break

        if not matched:
            input_df.at[idx, 'Predicted Description'] = 'No Match Found'

    # Show the results
    st.subheader("Classification Results")
    st.dataframe(input_df)

    # Download option
    output = BytesIO()
    input_df.to_excel(output, index=False, engine='openpyxl')
    st.download_button(
        label="Download Results",
        data=output.getvalue(),
        file_name="classified_meat_data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )